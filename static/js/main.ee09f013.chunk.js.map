{"version":3,"sources":["components/Categories.js","components/NewsItem.js","components/NewsList.js","lib/usePromise.js","pages/NewsPage.js","App.js","serviceWorker.js","index.js"],"names":["categories","name","text","CategoriesBlock","styled","div","_templateObject","Object","taggedTemplateLiteral","Category","NavLink","_templateObject2","Categories","_ref","onSelect","react_default","a","createElement","map","c","key","activeClassName","exact","to","concat","NewsItemBlock","NewsItem_templateObject","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","NewsListBlock","NewsList_templateObject","NewsList","category","_usePromise","promiseCreator","deps","_useState","useState","_useState2","slicedToArray","loading","setLoading","_useState3","_useState4","resolved","setResolved","_useState5","_useState6","error","setError","useEffect","asyncToGenerator","regenerator_default","mark","_callee","_resolved","wrap","_context","prev","next","sent","t0","stop","apply","this","arguments","process","usePromise","query","console","log","axios","get","_usePromise2","response","articles","data","components_NewsItem","NewsPage","match","params","Fragment","components_Categories","components_NewsList","App","react_router","path","component","Boolean","window","location","hostname","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee09f013.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nconst categories = [\n  {\n    name: 'all',\n    text: '전체보기',\n  },\n  {\n    name: 'business',\n    text: '비즈니스',\n  },\n  {\n    name: 'entertainment',\n    text: '엔터테인먼트',\n  },\n  {\n    name: 'health',\n    text: '건강',\n  },\n  {\n    name: 'science',\n    text: '과학',\n  },\n  {\n    name: 'sports',\n    text: '스포츠',\n  },\n  {\n    name: 'technology',\n    text: '기술',\n  },\n];\n\nconst CategoriesBlock = styled.div`\n  display: flex;\n  padding: 1rem;\n  width: 768px;\n  margin: 0 auto;\n  @media screen and (max-width: 768px) {\n    width: 100%;\n    overflow-x: auto;\n  }\n`;\n\nconst Category = styled(NavLink)`\n  font-size: 1.125rem;\n  cursor: pointer;\n  white-space: pre;\n  text-decoration: none;\n  color: inherit;\n  padding-bottom: 0.25rem;\n\n  &:hover {\n    color: #495057;\n  }\n\n  &.active {\n    font-weight: 600;\n    border-bottom: 2px solid #22b8cf;\n    color: #22b8cf;\n    &:hover {\n      color: #3bc9db;\n    }\n  }\n\n  & + & {\n    margin-left: 1rem;\n  }\n`;\nconst Categories = ({ onSelect }) => {\n  return (\n    <CategoriesBlock>\n      {categories.map((c) => (\n        <Category\n          key={c.name}\n          activeClassName=\"active\"\n          exact={c.name === 'all'}\n          to={\n            c.name === 'all'\n              ? '/News-Viewer-React/'\n              : `/News-Viewer-React/${c.name}`\n          }\n        >\n          {c.text}\n        </Category>\n      ))}\n    </CategoriesBlock>\n  );\n};\n\nexport default Categories;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst NewsItemBlock = styled.div`\n  display: flex;\n\n  .thumbnail {\n    margin-right: 1rem;\n    img {\n      display: block;\n      width: 160px;\n      height: 100px;\n      object-fit: cover;\n    }\n  }\n  .contents {\n    h2 {\n      margin: 0;\n      a {\n        color: black;\n      }\n    }\n    p {\n      margin: 0;\n      line-height: 1.5;\n      margin-top: 0.5rem;\n      white-space: normal;\n    }\n  }\n  & + & {\n    margin-top: 3rem;\n  }\n`;\nconst NewsItem = ({ article }) => {\n  const { title, description, url, urlToImage } = article;\n  return (\n    <NewsItemBlock>\n      {urlToImage && (\n        <div className=\"thumbnail\">\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src={urlToImage} alt=\"thumbnail\" />\n          </a>\n        </div>\n      )}\n      <div className=\"contents\">\n        <h2>\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {title}\n          </a>\n        </h2>\n        <p>{description}</p>\n      </div>\n    </NewsItemBlock>\n  );\n};\n\nexport default NewsItem;\n","import React from 'react';\nimport styled from 'styled-components';\nimport NewsItem from './NewsItem';\nimport axios from 'axios';\nimport usePromise from '../lib/usePromise';\n\nconst NewsListBlock = styled.div`\n  box-sizing: border-box;\n  padding-bottom: 3rem;\n  width: 768px;\n  margin: 0 auto;\n  margin-top: 2rem;\n  @media screen and (max-width: 768px) {\n    width: 100%;\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n`;\n\nconst NewsList = ({ category }) => {\n  const [loading, response, error] = usePromise(() => {\n    const query = category === 'all' ? '' : `&category=${category}`;\n    console.log(query);\n    return axios.get(\n      `https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=0a8c4202385d4ec1bb93b7e277b3c51f`,\n    );\n  }, [category]);\n\n  // 대기중일 때\n  if (loading) {\n    return <NewsListBlock>대기중...</NewsListBlock>;\n  }\n  // 아직 response 값이 설정되지 않았을 때\n  if (!response) {\n    return null;\n  }\n\n  // 에러가 발생했을 때\n  if (error) {\n    return <NewsListBlock>에러 발생!</NewsListBlock>;\n  }\n\n  // response 값이 유효할 때\n  const { articles } = response.data;\n  return (\n    <NewsListBlock>\n      {articles.map((article) => (\n        <NewsItem key={article.url} article={article} />\n      ))}\n    </NewsListBlock>\n  );\n};\n\nexport default NewsList;\n","import { useState, useEffect } from 'react';\n\nexport default function usePromise(promiseCreator, deps) {\n  // 로딩중 / 완료 / 실패에 대한 상태 관리\n  const [loading, setLoading] = useState(false);\n  const [resolved, setResolved] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const process = async () => {\n      setLoading(true);\n      try {\n        const resolved = await promiseCreator();\n        setResolved(resolved);\n      } catch (e) {\n        setError(e);\n      }\n      setLoading(false);\n    };\n    process();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return [loading, resolved, error];\n}\n","import React from 'react';\nimport Categories from '../components/Categories';\nimport NewsList from '../components/NewsList';\n\nconst NewsPage = ({ match }) => {\n  // 카테고리가 선택되지 않았으면 기본값 all로 사용\n  const category = match.params.category || 'all';\n\n  return (\n    <>\n      <Categories />\n      <NewsList category={category} />\n    </>\n  );\n};\n\nexport default NewsPage;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport NewsPage from './pages/NewsPage';\n\nconst App = () => {\n  return <Route path=\"/News-Viewer-React/:category?\" component={NewsPage} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}